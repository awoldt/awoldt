<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <script
      async=""
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
      crossorigin="anonymous"
    ></script>
    <title>How to Upload Files to Amazon S3 with Nodejs</title>
    <meta
      name="description"
      content="
      Learn the step-by-step process of uploading files to Amazon S3 using Node.js. This comprehensive guide provides detailed instructions, code snippets, and best practices for efficient file uploads to Amazon S3, empowering you to seamlessly integrate storage solutions into your Node.js applications."
    />
    <link
      rel="canonical"
      href="https://awoldt.dev/articles/uploading-file-to-s3-with-nodejs"
    />
    <meta
      property="og:title"
      content="How to Upload Files to Amazon S3 with Nodejs"
    />
    <meta
      property="og:description"
      content="Learn the step-by-step process of uploading files to Amazon S3 using Node.js. This comprehensive guide provides detailed instructions, code snippets, and best practices for efficient file uploads to Amazon S3"
    />
    <meta
      property="og:url"
      content="https://awoldt.dev/articles/uploading-file-to-s3-with-nodejs"
    />
    <meta property="og:site_name" content="awoldt" />
    <meta property="og:locale" content="en_US" />
    <meta
      property="og:image"
      content="https://awoldt.dev/imgs/articles/create-bucket-button.png"
    />
    <meta property="og:type" content="article" />
    <meta
      property="article:published_time"
      content="2024-01-24T02:32:33.232Z"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <meta
      name="twitter:title"
      content="How to Upload Files to Amazon S3 with Nodejs"
    />
    <meta
      name="twitter:description"
      content="Learn the step-by-step process of uploading files to Amazon S3 using Node.js"
    />
    <meta
      name="twitter:image"
      content="https://awoldt.dev/imgs/articles/create-bucket-button.png"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"
      crossorigin="anonymous"
    />

    <link rel="stylesheet" href="/styles/global.css" />

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/atom-one-dark-reasonable.min.css"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

    <script>
      hljs.highlightAll();
    </script>
  </head>
  <body>
    <div class="container-fluid">
      <nav class="navbar">
        <div class="container-fluid">
          <a class="navbar-brand" href="/">Awoldt</a>
          <div class="d-flex" role="search">
            <div style="margin-right: 20px">
              <a href="/articles">Articles</a>
            </div>
            <div>
              <a href="/projects" style="text-decoration: none">Projects</a>
            </div>
          </div>
        </div>
      </nav>
      <div class="container pt-5">
        <main>
          <div style="margin-bottom: 50px">
            <h1 style="margin-top: 75px; font-size: 50px">
              How to Upload Files to Amazon S3 with Nodejs
            </h1>
            <p class="text-secondary">
              With a few lines of code, you can quickly start uploading all of
              your files into the S3 buckets
            </p>
            <link
              href="https://cdn.jsdelivr.net/npm/shareon@2/dist/shareon.min.css"
              rel="stylesheet"
            />
            <div class="shareon" style="float: none">
              <a
                class="facebook"
                href="https://www.facebook.com/sharer/sharer.php?u=https://awoldt.dev/articles/spotify-api-with-javascript"
              ></a
              ><a
                href="https://www.linkedin.com/sharing/share-offsite/?url=https://awoldt.dev/articles/spotify-api-with-javascript"
                class="linkedin"
              ></a
              ><a
                class="reddit"
                href="https://www.reddit.com/submit?url=https://awoldt.dev/articles/spotify-api-with-javascript"
              ></a
              ><a
                class="twitter"
                href="https://twitter.com/intent/tweet?url=https://awoldt.dev/articles/spotify-api-with-javascript"
              ></a
              ><a class="copy-url"></a>
            </div>
          </div>

          <p>
            Amazon S3 is one of the most easy-to-use and powerful services AWS
            offers developers. You can store practically unlimited amounts of
            data across many buckets while making these files publicly
            accessible to people online. In this article, you will learn how to
            do just that.
          </p>

          <p>
            We will be uploading a basic HTML file and a PNG image. Before we
            begin, make sure you have the following:
          </p>

          <ul>
            <li>An AWS account</li>
            <li>@aws-sdk/client-s3 npm package installed</li>
          </ul>

          <p>Initialize a basic nodejs application using:</p>

          <pre>
            <code class="hljs language-text language-plaintext">npm init -y</code>
          </pre>

          <p>Now install the AWS package:</p>

          <pre>
            <code class="hljs language-text language-plaintext">npm install @aws-sdk/client-s3</code>
          </pre>

          <h2>Project Structure</h2>
          <p>
            For our project, we will have a JavaScript file
            <i>(app.js)</i> containing all the logic to interact with S3 and the
            HTML and PNG files sitting in the same project folder. It should
            resemble this:
          </p>
          <pre><code class="hljs language-text language-plaintext">/s3-tutorial (project folder)
    -app.js
    -helloworld.html
    -cat.png
    -package.json
</code>
          </pre>

          <p>
            You can download these
            <a
              href="/imgs/misc/helloworld.html"
              title="Download the HTML template file"
              download="true"
              >HTML</a
            >
            and
            <a
              href="/imgs/misc/cat.png"
              title="Download the PNG picture of a cat"
              download="true"
              >PNG</a
            >
            files for your local project. Also, you can create your files and
            follow along. Also, the names of these files don't matter either.
            Name them anything you like.
          </p>

          <h2>Create a New S3 Bucket</h2>
          <p>
            Log into your AWS account and find the S3 service screen. You can
            locate the search bar at the top of the page. Once we are on the S3
            page, click the Create Bucket button.
          </p>
          <img
            src="/imgs/articles/create-bucket-button.png"
            alt="AWS S3 create bucket button"
            class="img-fluid article-img"
          />
          <p>
            Once we are on the Create Bucket page, you will have some things to
            do. First, select the region you want to host your bucket. AWS
            regions specify what location you would like to host whatever AWS
            service you are utilizing; it does not matter much what region you
            choose. Typically, people select the regions closest to them, but
            you can pick any. I will use US East (N. Virginia), better known as
            us-east-1.
          </p>
          <img
            src="/imgs/articles/aws-bucket-region.png"
            alt="selecting s3 bucket region"
            class="img-fluid article-img"
          />
          <p>
            Now, name your bucket. This name must be globally unique, meaning it
            cannot have the same name as any other bucket in the region you
            selected.
          </p>
          <p>
            After naming your bucket, keep the rest of the default settings. Pay
            attention once you get to the
            <i>Block Public Access settings for this bucket</i>.
          </p>

          <img
            src="/imgs/articles/block-public-access-bucket.png"
            alt="block public access section of creating new s3 bucket"
            class="img-fluid article-img"
          />
          <p>
            We want to have this option <b>unchecked</b>. This will allow all
            files uploaded to this bucket to be accessible online so you can
            share links to your files with others.
          </p>
          <p>
            Keep the rest of the default settings and click the Create Bucket
            button at the bottom of the page.
          </p>

          <h2>Initialize the S3 Client</h2>

          <p>
            To communicate with AWS S3, you need an S3 client in your code that
            uses your specific AWS account's credentials to connect. You can
            find more about where to locate these credentials
            <a
              href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html"
              target="_blank"
              >here</a
            >. These credentials will consist of an access key and a secret
            access key specific to your account.
          </p>

          <p>
            Once you have both keys for your AWS account, we can start working
            on the code. Inside <i>app.js</i> lets initize an S3 client. As
            mentioned earlier in the article, ensure the
            <i>@aws-sdk/client-s3</i> package is installed.
          </p>

          <pre>
            <code class="hljs language-js">const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
const awsS3Client = new S3Client({
    credentials: {
        accessKeyId: "{YOUR_AWS_ACCESS_KEY}",
        secretAccessKey: "{YOUR_AWS_SECRET_ACCESS_KEY}",
    },
    region: "us-east-1",
});</code>
          </pre>

          <p>
            From the AWS S3 package, we are importing <i>S3Client</i> and
            <i>PutObjectCommand</i>. The client will be the primary way of
            connecting to our bucket, and the <i>PutObjectCommand</i> is used to
            send data to the bucket. We then initiate a new
            <i>S3Client</i> object, which takes in two parameters: the
            credentials object (containing our access keys) and the region the
            bucket is hosted (the region you choose to host your bucket). A list
            of all the region names can be found
            <a
              href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html"
              target="_blank"
              >here</a
            >. Use the shorthand name for the region for the parameter here. For
            example, US East (N. Virginia) would be <i>us-east-1</i>.
          </p>

          <h2>Read and Send Files to S3</h2>
          <p>
            Now, the fun part. We must read the files from our local directory
            and upload them to AWS. For this, we will utilize the native
            <i>fs/promises</i> Nodejs package. This is similar to the
            <i>fs</i> package, except this is asynchronous and will allow us to
            use async/await to upload the files. If you don't know what that
            means, don't worry that's not part of this tutorial.
          </p>

          <p>Let's start off by reading the html file. See the code below:</p>

          <pre>
            <code class="hljs language-js">const fs = require("fs/promises");
              
async function UploadFiles() {
  // first we are going to read the html file
  const htmlFileData = await fs.readFile("helloworld.html", {
    encoding: "utf-8",
  });
}</code>
          </pre>

          <p>
            This will read the file in its entirety with the correct encoding.
            The value returned to <i>htmlFileData</i> will be what is uploaded
            to S3. We now take the client we initiated earlier and plug in the
            file we just read like this:
          </p>

          <pre>
            <code class="hljs language-js">const fs = require("fs/promises");

async function UploadFiles() {
  // first we are going to read the html file
  const htmlFileData = await fs.readFile("helloworld.html", {
    encoding: "utf-8",
  });

  await awsS3Client.send(
    new PutObjectCommand({
      Bucket: "491292639630-us-east-1-awoldt", // this should be the exact name of your bucket from the above steps
      Key: `helloworld.html`, // the file name you want stored in S3 (make sure it ends with the correct file extension)
      Body: htmlFileData, // the actual data being updloaded (the file)
      ContentType: "text/html", // this content type header lets s3 how to display it in browser
    })
  );

  console.log("\nsuccessfully uploaded file to S3!");
}

UploadFiles();</code>
          </pre>

          <p>
            Go and check your bucket! You should see the file with the name of
            the <i>key</i> property you gave it above. It's that easy. Now,
            let's do the same with the image. Note the code is slightly
            different for uploading the image. We do not want to have the
            encoding parameter for the <i>fs.readFile</i>
          </p>
          <pre>
            <code class="hljs language-js">const fs = require("fs/promises");

async function UploadFiles() {
  // first we are going to read the html file
  const catImageDAta = await fs.readFile("cat.png");

  await awsS3Client.send(
    new PutObjectCommand({
      Bucket: "491292639630-us-east-1-awoldt", // this should be the exact name of your bucket from the above steps
      Key: `cat.png`, // the file name you want stored in S3 (make sure it ends with the correct file extension)
      Body: catImageDAta, // the actual data being updloaded (the file)
      ContentType: "image/png", // this content type header lets s3 how to display it in browser
    })
  );

  console.log("\nsuccessfully uploaded file to S3!");
}

UploadFiles();</code>
          </pre>

          <h2>Make Files Accessible to the Internet</h2>

          <p>
            Navigate to the <i>properties</i> tab of your bucket. You will see
            what's known as the <i>Amazon Resource Name</i>, or <i>ARN</i> for
            short. Every AWS resource will have a unique ARN assigned to it. We
            need this string for the next step. Make sure to copy it.
          </p>

          <img
            src="/imgs/articles/aws-arn.png"
            alt="aws s3 buckets arn"
            class="img-fluid article-img"
          />
          <p>
            We need to change the bucket policy now. Don't worry too much about
            what any of this means; just know it is needed for the bucket to
            have public URLs for your files. Copy the following JSON code:
          </p>
          <pre>
            <code class="hljs language-json">{
  "Version": "2012-10-17",
  "Statement": [
      {
          "Sid": "PublicReadGetObject",
          "Effect": "Allow",
          "Principal": "*",
          "Action": "s3:GetObject",
          "Resource": "{YOUR_BUCKETS_RESOURCE_ARN}/*"
      }
  ]
}</code>
          </pre>
          <p>
            Be sure to replace the <i>{YOUR_BUCKETS_RESOURCE_ARN}</i> with what
            you copied from the last step.
          </p>

          <p>
            Head over to the <i>permissions</i> tab of your bucket and hit the
            edit button near the bucket policy input. Once here, copy the JSON
            code from above and paste and hit save changes.
          </p>

          <img
            src="/imgs/articles/permissions-tab-s3-bucket.png"
            alt="permissions tab of s3 bucket"
            class="img-fluid article-img"
          />

          <h2>Conclusion</h2>
          <p>
            🎉 Congratulations, you uploaded two files to AWS S3 and made them
            public online! Try experimenting more and uploading different types
            of files, creating folders in your buckets to store these files in,
            or creating a script that uploads the entirety of your computer's
            hard drive! The possibilities are endless.
          </p>

          <div style="margin: 50px 0px 50px 0px">
            <h2 style="font-family: Silkscreen-Regular">Read more</h2>
            <% if(readMoreLinks !== null) { %> <% readMoreLinks.forEach(x => {
            %>
            <div><a href="/articles/<%= x.path %>"><%= x.name %></a></div>

            <% }) %> <% } %>
          </div>
        </main>
      </div>
    </div>
  </body>
</html>
